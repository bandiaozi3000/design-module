一. 模式的结构
装饰模式主要包含以下角色。
抽象构件（Component）角色：定义一个抽象接口以规范准备接收附加责任的对象。
具体构件（ConcreteComponent）角色：实现抽象构件，通过装饰角色为其添加一些职责。
抽象装饰（Decorator）角色：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。
具体装饰（ConcreteDecorator）角色：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。

三，使用场景，及优缺点
使用场景：
替代继承，扩展一个类的功能
动态的给一个对象添加功能，以及动态的撤销该功能
优点：
动态扩展一个实现类的功能，在不需要添加功能的时候，可以撤销装饰。
装饰类和被装饰类模块间，通过抽象产生依赖，不会相互耦合
装饰模式替换继承，可以避免继承链的子类被影响

四，装饰模式与代理模式的区别
装饰模式：侧重给一个实现类动态添加功能，不会对实现类的方法进行过滤拦截
代理模式：侧重将一个实现类的功能，委托给代理类来处理，可以对实现类的方法进行过滤拦截(某种情况下，可能不执行实现类的方法)
