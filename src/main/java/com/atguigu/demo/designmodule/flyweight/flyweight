2、享元模式的概念
享元模式：运用共享技术有效地支持大量细粒度对象的复用。

在项目中出现很多相同或类似的对象，享元模式会创建一个享元池将这些公共的实例保存在享元池中。可以针对的创建不同的对象，然后通过复用的方式进行分配。
需要的时候就将对应的对象取出，不需要则放回。

享元模式能够实现共享技术！

3、享元模式的UML图
1、Flyweight (享元抽象类)：一般是接口或者抽象类，定义了享元类的公共方法。这些方法可以分享内部状态的数据，也可以调用这些方法修改外部状态。
2、ConcreteFlyweight(具体享元类)：具体享元类实现了抽象享元类的方法，为享元对象开辟了内存空间来保存享元对象的内部数据，同时可以通过和单例模式结合只创建一个享元对象。
3、UnshareConcreteFlyweight(非共具体享元类):并不是所有的享元类都需要被共享的有的享元类就不要被共享，可以通过享元类来实例一个非共享享元对象。
4、Flyweight(享元工厂类)：享元工厂类创建并且管理享元类，享元工厂类针对享元类来进行编程，通过提供一个享元池来进行享元对象的管理。
一般享元池设计成键值对，或者其他的存储结构来存储。当客户端进行享元对象的请求时，如果享元池中有对应的享元对象则直接返回对应的对象，否则工厂类创建对应的享元对象并保存到享元池。

5、享有模式的优缺点及使用场景
优点：
节约系统的开销。保证一个常用的对象只有一个！
外部状态不会影响内部状态，可以在不同环境下进行共享哦。
缺点：
享元模式使逻辑变得更加复杂，需要将享元对象分出内部状态和外部状态。
并且为了使对象可以共享，外部状态在很多情况下是必须有的，比如围棋的位置。当读取外部状态时明显会增加运行时间。
使用场景：
一个系统有大量细粒度化的对象，占据大量的内存。
对象大部分属性可以外部化，并且能将外部的属性放入内部属性中来。
使用享元模式需要维护享元池，所以要用那种常用的经常调用的对象可以使用享元模式。

